/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    skimseq Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs

params {

    help                        = null

    slurm_account               = null                              // account to use on SLURM

    ///// inputs
    samplesheet                 = null                              // path to samplesheet .csv file
    ref_genome                  = null                              // path to reference genome
    mito_genome                 = null                              // path to mitochondrial genome

    ///// read filtering (fastp) parameters
    rf_quality                  = 20                                // read minimum base quality (passed to 'fastp --qualified_quality_phred'); integer
    rf_length                   = 15                                // read minimum read length (passed to 'fastp --length_required'); integer
    rf_n_bases                  = 5                                 // read maximum N bases (passed to 'fastp --n_base_limit'); integer
    rf_trim_polyg               = true                              // force polyG tail trimming (enables 'fastp --trim_poly_g'); boolean
    rf_cut_right                = true                              // trim window and right of read if quality drops below threshold (enables 'fastp --cut_right'); boolean
    rf_cut_window_size          = 4                                 // size in bp of trimming window (passed to 'fastp --cut_right_window_size'); integer
    rf_cut_mean_quality         = 20                                // mean quality threshold to trigger trimming (passed to 'fastp cut_right_mean_quality'); integer
    rf_lc_filter                = true                              // read low complexity filter (enables 'fastp --low_complexity_filter'); boolean
    rf_lc_threshold             = 30                                // threshold for low complexity filter (passed to 'fastp --complexity_threshold'); integer
    rf_correction               = true                              // correct bases in overlapping regions of paired-end reads (enables 'fastp --correction'); boolean
    rf_overlap_length           = 30                                // minimum bp overlap for detection of paired-end overlap (passed to 'fastp --overlap_len_require'); integer
    rf_overlap_diff             = 5                                 // maximum mismatches for detection of paired-end overlap (passed to 'fastp --overlap_diff_limit'); integer
    rf_overlap_diff_pc          = 20                                // maximum % mismatches for detection of paired-end overlap, 20 = 20% (passed to 'fastp --overlap_diff_percent_limit'); integer
    rf_custom_flags             = "none"                            // custom fastp filtering flags, passed as a single string, overrides all other filters; quoted string

    ///// SNP variant filtering (GATK) parameters
    snp_qd                      = 2.0                               // filter SNPs with QD (quality by depth) < value; float
    snp_qual                    = 30.0                              // filter SNPs with QUAL (raw quality) < value; float
    snp_sor                     = 3.0                               // filter SNPs with SOR (strand odds ratio) > value; float
    snp_fs                      = 60.0                              // filter SNPs with FS (Fisher strand bias) > value; float
    snp_mq                      = 40.0                              // filter SNPs with MQ (root mean square mapping quality) < value; float
    snp_mqrs                    = -12.5                             // filter SNPs with MSRankSum (MappingQualityRankSumTest) < value; float
    snp_rprs                    = -8.0                              // filter SNPs with ReadPosRankSum < value; float
    snp_maf                     = 0.05                              // filter SNPs with minor allele frequency < value; float/proportion
    snp_eh                      = 54.69                             // filter SNPs with ExcessHet (excess heterozygosity) > value; float
    snp_dp_min                  = 6                                 // filter SNPs with DP (depth) < value; integer
    snp_dp_max                  = 1500                              // filter SNPs with DP (depth) > value; integer
    snp_custom_flags            = "none"                            // custom GATK filtering flags for SNPs, passed as a single string, overrides all other SNP filters; quoted string

    ///// Indel variant filtering (GATK) parameters
    indel_qd                    = 2.0                               // filter indels with QD (quality by depth) < value; float
    indel_qual                  = 30.0                              // filter indels with QUAL (raw quality) < value; float
    indel_fs                    = 200.0                             // filter indels with FS (Fisher strand bias) > value; float
    indel_rprs                  = -20.0                             // filter indels with ReadPosRankSum < value; float
    indel_maf                   = 0.05                              // filter indels with minor allele frequency < value; float/proportion
    indel_eh                    = 54.69                             // filter indels with ExcessHet (excess heterozygosity) > value; float
    indel_dp_min                = 6                                 // filter indels with DP (depth) < value; integer
    indel_dp_max                = 1500                              // filter indels with DP (depth) > value; integer
    indel_custom_flags          = "none"                            // custom GATK filtering flags for indels, passed as a single string, overrides all other indel filters; quoted string

    ///// general filtering (GATK)
    max_missing                 = 0.05                              // maximum fraction of missing data to accept when filtering variants; float/proportion

    ///// parallelisation parameters
    fastq_chunk_size            = 5000000                           // number of reads .fastq files should be split into for mapping to genome
    interval_size               = 5E6                               // number of bases in each genomic interval used for genotyping

    ///// debugging options
    debug_mode                  = false 
    rdata                       = false                             // save all data/objects from process-level R sessions as .RData files in work dir; boolean
    all_fasta                   = false                             // save .fasta files within every process; boolean
    save_intermediate           = false                             // save combined .fasta files after each filtering step (in ./output/results); boolean
    save_input                  = false                             // save re-formatted input sequences as a combined .fasta file (in ./output/results); boolean

    ///// Max resource options per task/process
    // Defaults only, expecting to be overwritten
    max_memory                  = '128.GB'
    max_cpus                    = 16
    max_time                    = '240.h'

}


validation {

    failUnrecognisedParams      = false                             // run will fail if unrecognised parameters are given, not just give a warning

}


profiles {

    basc_modules {
        process.executor                = 'slurm'
        process.queue                   = 'batch,shortrun'
        params.slurm_account            = 'ngdsi'
        process.clusterOptions          = "--account $params.slurm_account --ntasks=1"
        params.max_memory               = '512.GB'
        params.max_time                 = '168.h'
        params.max_cpus                 = 48
        executor.queueSize              = 200
        executor.pollInterval           = '10 sec'
        executor.submitRateLimit        = '5 sec'
    }
    basc_shifter {
        process.executor                = 'slurm'
        process.queue                   = 'batch,shortrun'
        params.slurm_account            = 'ngdsi'
        process.clusterOptions          = "--account $params.slurm_account --ntasks=1"
        params.max_memory               = '512.GB'
        params.max_time                 = '168.h'
        params.max_cpus                 = 48
        executor.queueSize              = 200
        executor.pollInterval           = '10 sec'
        executor.submitRateLimit        = '5 sec'
        process.module                  = 'shifter' // this runs 'module load shifter' at the start of each process job
        shifter.enabled                 = true
    }       
    test { /// this profile should always be specified last to force the minimal resource requirements
        params.max_memory               = '2.GB'
        params.max_time                 = '10.m'
        params.max_cpus                 = 1
    }       
    debug {     
        params.rdata                    = true
        params.all_fasta                = true
        params.save_intermediate        = true
        params.debug_mode               = true
    }           
    apptainer {         
        apptainer.enabled               = true
        apptainer.autoMounts            = true
        charliecloud.enabled            = false
        conda.enabled                   = false
        docker.enabled                  = false
        podman.enabled                  = false        
        shifter.enabled                 = false
        singularity.enabled             = false
    }           
    docker {            
        apptainer.enabled               = false
        charliecloud.enabled            = false
        conda.enabled                   = false
        docker.enabled                  = true
        docker.runOptions               = '-u $(id -u):$(id -g)'
        podman.enabled                  = false        
        shifter.enabled                 = false
        singularity.enabled             = false
    }           
    podman {            
        apptainer.enabled               = false
        charliecloud.enabled            = false
        conda.enabled                   = false
        docker.enabled                  = false
        podman.enabled                  = true        
        shifter.enabled                 = false
        singularity.enabled             = false
    }           
    shifter {           
        apptainer.enabled               = false
        charliecloud.enabled            = false
        conda.enabled                   = false
        docker.enabled                  = false
        podman.enabled                  = false        
        shifter.enabled                 = true
        singularity.enabled             = false
    }           
    singularity {           
        apptainer.enabled               = false
        charliecloud.enabled            = false
        conda.enabled                   = false
        docker.enabled                  = false
        podman.enabled                  = false        
        shifter.enabled                 = false
        singularity.enabled             = true
        singularity.autoMounts          = true
    }


}


process {

    // error handling
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'
    withLabel: error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }

    // resources
    withLabel: very_small {
        cpus    = { check_max( 1                  , 'cpus'    ) }
        memory  = { check_max( 2.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 10.m * task.attempt, 'time'    ) }
    }
    withLabel: small {
        cpus    = { check_max( 1                  , 'cpus'    ) }
        memory  = { check_max( 4.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 30.m * task.attempt, 'time'    ) }
    }
    withLabel: medium {
        cpus    = { check_max( 1                  , 'cpus'    ) }
        memory  = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 1.h * task.attempt, 'time'     ) }
    }
    withLabel: high {
        cpus    = { check_max( 4 * task.attempt   , 'cpus'    ) }
        memory  = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 1.h *  task.attempt, 'time'    ) }
    }
    withLabel: very_high {
        cpus    = { check_max( 16 * task.attempt  , 'cpus'    ) }
        memory  = { check_max( 64.GB * task.attempt, 'memory'  ) }
        time    = { check_max( 1.h *  task.attempt, 'time'    ) }
    }
    withLabel: long {
        time    = { check_max( 4.h * task.attempt, 'time'    ) }
    }
}


plugins {
    id 'nf-schema@2.0.0'                            // create schema to validate sample sheets and pipeline parameters
}


report {
    enabled             = true
    overwrite           = true
    file                = "output/run_info/report.html"
}


trace {
    enabled             = true
    overwrite           = true
    file                = "output/run_info/trace.tsv"
}


dag {
    enabled             = true
    overwrite           = true
    file                = "output/run_info/dag.html"
    verbose             = true
}


timeline {
    enabled             = true
    overwrite           = true
    file                = "output/run_info/timeline.html"
}


// Function to ensure that resource requirements don't go beyond a maximum limit
// from: https://github.com/nf-core/tools/blob/99961bedab1518f592668727a4d692c4ddf3c336/nf_core/pipeline-template/nextflow.config#L206-L237
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}