/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    skimseq Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs

params {

    help                        = null

    slurm_account               = null                              // account to use on SLURM

    ///// inputs
    samplesheet                 = null                              // path to samplesheet .csv file
    ref_genome                  = null                              // path to reference genome
    mito_contig                 = null                              // Name of mitochondrial contig
    
    ///// Parallelisation parameters
    fastq_chunk_size            = 1E6                               // number of reads .fastq files should be split into for mapping to genome
    hc_interval_size            = 1E8                               // Create hc intervals containing approximately this many aligned bases for haplotype caller; integer
    jc_interval_scaling_factor  = 5e-7                              // Scaling factor for joint calling intervals, representing mem usage in GB per variant per sample; float
    jc_interval_min_n           = 10                                // Minimum number of intervals to use for joint calling; float

    ///// Reference genome masking for genotyping only (Not alignment)
    include_bed                 = null                              // Optional input bed file to just include these intervals for genotyping; path
    use_reference_hardmasks     = true                              // Use hard masks (N bases) already present in reference genome; boolean
    use_reference_softmasks     = false                             // Use soft masks (lowercase bases) already present in reference genome; boolean
    exclude_bed                 = null                              // Optional exclusion of certain intervals; path
    exclude_padding             = 0                                 // Optional padding of exclusion intervals; integer
    genotype_masked_bases       = false                             // Whether to genotype masked bases; boolean
    filter_masked_variants      = true                              // Whether to filter masked bases from vcf; boolean
    bin_size                    = 1000                              // Base pair length of bins for coverage & GC filtering; integer
    bin_gc_lower                = 0.1                               // Exclude bins with %GC < value ; float/proportion
    bin_gc_upper                = 0.9                               // Exclude bins greater %GC > value; float/proportion
    bin_min_reads               = 1                                 // Exclude bins with total read count < value; integer
    bin_lower_read_perc         = 1.0                               // Exclude bins with lower than this this percentile coverage; float/proportion
    bin_upper_read_perc         = 99.0                              // Exclude bins with higher than this this percentile coverage; float/proportion
    bin_filter_perc_samples     = 90.0                              // Percentage of samples that must violate the upper and low bin filters; float/proportion

    ///// read filtering (fastp) parameters
    rf_quality                  = 20                                // read minimum base quality (passed to 'fastp --qualified_quality_phred'); integer
    rf_length                   = 15                                // read minimum read length (passed to 'fastp --length_required'); integer
    rf_n_bases                  = 5                                 // read maximum N bases (passed to 'fastp --n_base_limit'); integer
    rf_trim_polyg               = true                              // force polyG tail trimming (enables 'fastp --trim_poly_g'); boolean
    rf_cut_right                = true                              // trim window and right of read if quality drops below threshold (enables 'fastp --cut_right'); boolean
    rf_cut_window_size          = 4                                 // size in bp of trimming window (passed to 'fastp --cut_right_window_size'); integer
    rf_cut_mean_quality         = 20                                // mean quality threshold to trigger trimming (passed to 'fastp cut_right_mean_quality'); integer
    rf_lc_filter                = true                              // read low complexity filter (enables 'fastp --low_complexity_filter'); boolean
    rf_lc_threshold             = 30                                // threshold for low complexity filter (passed to 'fastp --complexity_threshold'); integer
    rf_correction               = true                              // correct bases in overlapping regions of paired-end reads (enables 'fastp --correction'); boolean
    rf_overlap_length           = 30                                // minimum bp overlap for detection of paired-end overlap (passed to 'fastp --overlap_len_require'); integer
    rf_overlap_diff             = 5                                 // maximum mismatches for detection of paired-end overlap (passed to 'fastp --overlap_diff_limit'); integer
    rf_overlap_diff_pc          = 20                                // maximum % mismatches for detection of paired-end overlap, 20 = 20% (passed to 'fastp --overlap_diff_percent_limit'); integer
    rf_custom_flags             = "none"                            // custom fastp filtering flags, passed as a single string, overrides all other filters; quoted string

    ///// Variant calling (GATK) parameters
    hc_interval_padding            = 500                               // Pad intervals by this many bases for genotyping; integer
    hc_min_pruning              = 2                                 // Minimum support to not prune paths in the assembly graph. Setting to 1 increases sensitivity for low-coverage data; integer
    hc_min_dangling_length      = 4                                 // Minimum length of a dangling branch to attempt recovery. Smaller number increases sensitivity at expense of false positives; integer
    hc_max_reads_startpos       = 50                                // Maximum number of reads to retain per alignment start position. Increase if doing deep targetted sequencing; integer
    hc_rmdup                    = true                              // Exclude duplicate aligned reads from genotyping; logical
    hc_minmq                    = 20                                // Minimum mapping quality for genotyping; integer
    ploidy                      = 2                                 // Ploidy of the samples; integer
    output_invariant            = false                             // Whether to output invariant sites; logical

    ///// genotype and sample filtering (GATK)
    gt_qual                     = 20                                // Minimum genotype quality; integer
    gt_dp_min                   = 1                                 // Filter genotypes with DP (depth) < value; integer
    gt_dp_max                   = 100                               // Filter genotypes with DP (depth) > value; integer
    sample_max_missing          = 0.5                               // filter samples with < fraction of missing data; float/proportion

    ///// SNP variant filtering (GATK) parameters
    snp_qd                      = 2.0                               // filter SNPs with QD (quality by depth) < value; float
    snp_qual                    = 30.0                              // filter SNPs with QUAL (raw quality) < value; float
    snp_sor                     = 3.0                               // filter SNPs with SOR (strand odds ratio) > value; float
    snp_fs                      = 60.0                              // filter SNPs with FS (Fisher strand bias) > value; float
    snp_mq                      = 40.0                              // filter SNPs with MQ (root mean square mapping quality) < value; float
    snp_mqrs                    = -12.5                             // filter SNPs with MSRankSum (MappingQualityRankSumTest) < value; float
    snp_rprs                    = -8.0                              // filter SNPs with ReadPosRankSum < value; float
    snp_maf                     = 0.05                              // filter SNPs with minor allele frequency < value; float/proportion
    snp_mac                     = 2                                 // filter SNPs with minor allele count < value; integer
    snp_eh                      = 54.69                             // filter SNPs with ExcessHet (excess heterozygosity) > value; float
    snp_dp_min                  = 6                                 // filter SNPs with DP (depth) < value; integer
    snp_dp_max                  = 1500                              // filter SNPs with DP (depth) > value; integer
    snp_max_missing             = 0.05                              // filter SNPs with < fraction of missing data POST FILTERING; float/proportion
    snp_custom_flags            = "none"                            // custom GATK filtering flags for SNPs, passed as a single string, overrides all other SNP filters; quoted string

    ///// Indel variant filtering (GATK) parameters
    indel_qd                    = 2.0                               // filter indels with QD (quality by depth) < value; float
    indel_qual                  = 30.0                              // filter indels with QUAL (raw quality) < value; float
    indel_fs                    = 200.0                             // filter indels with FS (Fisher strand bias) > value; float
    indel_rprs                  = -20.0                             // filter indels with ReadPosRankSum < value; float
    indel_maf                   = 0.05                              // filter indels with minor allele frequency < value; float/proportion
    indel_mac                   = 2                                 // filter indels with minor allele count < value; integer
    indel_eh                    = 54.69                             // filter indels with ExcessHet (excess heterozygosity) > value; float
    indel_dp_min                = 6                                 // filter indels with DP (depth) < value; integer
    indel_dp_max                = 1500                              // filter indels with DP (depth) > value; integer
    indel_max_missing           = 0.05                              // filter indels with < fraction of missing data POST FILTERING; float/proportion
    indel_custom_flags          = "none"                            // custom GATK filtering flags for indels, passed as a single string, overrides all other indel filters; quoted string

    ///// invariant site filtering (GATK) parameters
    inv_dp_min                  = 6                                 // filter indels with DP (depth) < value; integer
    inv_dp_max                  = 1500                              // filter indels with DP (depth) > value; integer
    inv_max_missing           = 0.05                                // filter indels with < fraction of missing data POST FILTERING; float/proportion
    inv_custom_flags            = "none"                            // custom GATK filtering flags for invariants, passed as a single string, overrides all other invariant filters; quoted string

    ///// debugging options
    debug_mode                  = false 
    rdata                       = false                             // save all data/objects from process-level R sessions as .RData files in work dir; boolean

    ///// Max resource options per task/process
    // Defaults only, expecting to be overwritten
    max_memory                  = '128.GB'
    max_cpus                    = 16
    max_time                    = '240.h'

}


validation {

    failUnrecognisedParams      = false                             // run will fail if unrecognised parameters are given, not just give a warning

}


profiles {

    basc_modules {
        process.executor                = 'slurm'
        process.queue                   = 'batch,shortrun'
        params.slurm_account            = 'ngdsi'
        process.clusterOptions          = "--account $params.slurm_account --ntasks=1"
        params.max_memory               = '512.GB'
        params.max_time                 = '168.h'
        params.max_cpus                 = 48
        executor.queueSize              = 200
        executor.pollInterval           = '10 sec'
        executor.submitRateLimit        = '5 sec'
    }
    basc_shifter {
        process.executor                = 'slurm'
        process.queue                   = 'batch,shortrun'
        params.slurm_account            = 'ngdsi'
        process.clusterOptions          = "--account $params.slurm_account --ntasks=1"
        params.max_memory               = '512.GB'
        params.max_time                 = '168.h'
        params.max_cpus                 = 48
        executor.queueSize              = 200
        executor.pollInterval           = '10 sec'
        executor.submitRateLimit        = '5 sec'
        process.module                  = 'shifter' // this runs 'module load shifter' at the start of each process job
        shifter.enabled                 = true
    }       
    test { /// this profile should always be specified last to force the minimal resource requirements
        params.samplesheet              = 'test_data/qfly/test_samplesheet.csv' // Qfly test data
        params.ref_genome               = 'test_data/qfly/GCA_016617805.2_CM028320.1_50000-99999.fa' // Qfly genome subset to 50-100kb
        params.mito_contig              = 'HQ130030.1'
        params.hc_interval_n            = 2
        params.hc_interval_size         = -1 // disabled for test data
        params.interval_subdivide_balanced   = true
        params.use_reference_hardmasks  = true
        params.use_reference_softmasks  = true
        params.jc_interval_min_n        = 2
        params.include_bed              = 'test_data/qfly/include_interval.bed'
        params.exclude_bed              = 'test_data/qfly/exclude_interval.bed'
        params.output_invariant         = true
        params.fastq_chunk_size	      	= 1000
        params.max_memory               = '2.GB'
        params.max_time                 = '10.m'
        params.max_cpus                 = 1
    }       
    debug {     
        params.rdata                    = true
        params.all_fasta                = true
        params.save_intermediate        = true
        params.debug_mode               = true
    }           
    apptainer {         
        apptainer.enabled               = true
        apptainer.autoMounts            = true
        charliecloud.enabled            = false
        conda.enabled                   = false
        docker.enabled                  = false
        podman.enabled                  = false        
        shifter.enabled                 = false
        singularity.enabled             = false
    }           
    docker {            
        apptainer.enabled               = false
        charliecloud.enabled            = false
        conda.enabled                   = false
        docker.enabled                  = true
        docker.runOptions               = '-u $(id -u):$(id -g)'
        podman.enabled                  = false        
        shifter.enabled                 = false
        singularity.enabled             = false
    }           
    podman {            
        apptainer.enabled               = false
        charliecloud.enabled            = false
        conda.enabled                   = false
        docker.enabled                  = false
        podman.enabled                  = true        
        shifter.enabled                 = false
        singularity.enabled             = false
    }           
    shifter {           
        apptainer.enabled               = false
        charliecloud.enabled            = false
        conda.enabled                   = false
        docker.enabled                  = false
        podman.enabled                  = false        
        shifter.enabled                 = true
        singularity.enabled             = false
    }           
    singularity {           
        apptainer.enabled               = false
        charliecloud.enabled            = false
        conda.enabled                   = false
        docker.enabled                  = false
        podman.enabled                  = false        
        shifter.enabled                 = false
        singularity.enabled             = true
        singularity.autoMounts          = true
    }


}


process {

    // error handling
    errorStrategy = { task.exitStatus in ((130..145) + 104 + 247) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'
    withLabel: error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }


    // Main & generic process resources
    withName: INDEX_GENOME {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 32.GB,  task.attempt ) }
        time    = { time_scale ( 30.m,   task.attempt ) }
    }    
    withName: INDEX_MITO {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 4.GB,  task.attempt ) }
        time    = { time_scale ( 10.m,   task.attempt ) }
    }    
    withName: MULTIQC {
        cpus    = { cpu_scale  ( 4,     task.attempt ) }
        memory  = { mem_scale  ( 8.GB,  task.attempt ) }
        time    = { time_scale ( 30.m,   task.attempt ) }
    }

    // mask_genome subworkflow resources
    withName: CREATE_GENOME_MASKS {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 4.GB,  task.attempt ) }
        time    = { time_scale ( 10.m,   task.attempt ) }
    }    
    withName: CREATE_GENOME_BINS {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 4.GB,  task.attempt ) }
        time    = { time_scale ( 10.m,   task.attempt ) }
    }
    withName: COUNT_READS_BINS {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 10.GB,  task.attempt ) }
        time    = { time_scale ( 10.m,   task.attempt ) }
    }  
    withName: CREATE_MASKS_BINS {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 10.GB,  task.attempt ) }
        time    = { time_scale ( 10.m,   task.attempt ) }
    }    
    withName: MERGE_MASKS {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 4.GB,  task.attempt ) }
        time    = { time_scale ( 5.m,   task.attempt ) }
    }       
    withName: SUMMARISE_MASKS {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 4.GB,  task.attempt ) }
        time    = { time_scale ( 5.m,   task.attempt ) }
    }       
    
    // process_reads subworkflow resources
    withName: SPLIT_FASTQ {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 1.GB,  task.attempt ) }
        time    = { time_scale ( 10.m,   task.attempt ) }
    }   
    withName: MAP_TO_GENOME {
        cpus    = { cpu_scale  ( 4,     task.attempt ) }
        memory  = { mem_scale  ( 16.GB,  task.attempt ) }
        time    = { time_scale ( 2.h,   task.attempt ) }
    }
    withName: MERGE_BAM {
        cpus    = { cpu_scale  ( 4,     task.attempt ) }
        memory  = { mem_scale  ( 16.GB,  task.attempt ) }
        time    = { time_scale ( 2.h,   task.attempt ) }
    }
    withName: BAM_STATS {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 1.GB,  task.attempt ) }
        time    = { time_scale ( 30.m,   task.attempt ) }
    }
    withName: EXTRACT_UNMAPPED {
        cpus    = { cpu_scale  ( 4,     task.attempt ) }
        memory  = { mem_scale  ( 8.GB,  task.attempt ) }
        time    = { time_scale ( 30.m,   task.attempt ) }
    }
    
    
    //GATK_genotyping subworkflow Resources
    withName: CREATE_HC_INTERVALS {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 16.GB,  task.attempt ) }
        time    = { time_scale ( 1.h,   task.attempt ) }
    }
    withName: CREATE_JC_INTERVALS {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 16.GB,  task.attempt ) }
        time    = { time_scale ( 1.h,   task.attempt ) }
    }
    withName: CALL_VARIANTS {
        cpus    = { cpu_scale  ( 2,     task.attempt ) }
        memory  = { mem_scale  ( 16.GB,  task.attempt ) }
        time    = { time_scale ( 2.h,   task.attempt ) }
    }
    withName: GENOMICSDB_IMPORT {
        cpus    = { cpu_scale  ( 6,     task.attempt ) }
        memory  = { mem_scale  ( 48.GB,  task.attempt ) }
        time    = { time_scale ( 2.h,   task.attempt ) }
    }
    withName: JOINT_GENOTYPE {
        cpus    = { cpu_scale  ( 2,     task.attempt ) }
        memory  = { mem_scale  ( 48.GB,  task.attempt ) }
        time    = { time_scale ( 24.h,   task.attempt ) }
    }    
    withName: MERGE_VCFS {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 48.GB,  task.attempt ) }
        time    = { time_scale ( 1.h,   task.attempt ) }
    }  

    // Filtering & Annotation resources
    withName: FILTER_VCF_GT{
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 48.GB,  task.attempt ) }
        time    = { time_scale ( 6.h,   task.attempt ) }
    }
    withName: FILTER_VCF_SAMPLES{
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 48.GB,  task.attempt ) }
        time    = { time_scale ( 6.h,   task.attempt ) }
    }
    withName: FILTER_VCF_SITES{
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 48.GB,  task.attempt ) }
        time    = { time_scale ( 6.h,   task.attempt ) }
    }
    withName: ANNOTATE_VCF {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 48.GB,  task.attempt ) }
        time    = { time_scale ( 6.h,   task.attempt ) }
    }  
    withName: PLOT_GT_FILTERS {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 8.GB,  task.attempt ) }
        time    = { time_scale ( 30.m,   task.attempt ) }
    } 
    withName: PLOT_SITE_FILTERS {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 8.GB,  task.attempt ) }
        time    = { time_scale ( 30.m,   task.attempt ) }
    } 
    withName: VCF_STATS {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 8.GB,  task.attempt ) }
        time    = { time_scale ( 30.m,   task.attempt ) }
    } 

    
    // mito_genotyping subworkflow resources
    withName: CONSENSUS_MITO {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 8.GB,  task.attempt ) }
        time    = { time_scale ( 30.m,   task.attempt ) }
    }
    withName: PROCESS_BAM_MITO {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 8.GB,  task.attempt ) }
        time    = { time_scale ( 1.h,   task.attempt ) }
    }   

    //Outputs subworkflow
    withName: CREATE_BEAGLE {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 24.GB,  task.attempt ) }
        time    = { time_scale ( 30.m,   task.attempt ) }
    }
    withName: CREATE_PSEUDOHAP {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 24.GB,  task.attempt ) }
        time    = { time_scale ( 30.m,   task.attempt ) }
    }
    withName: VCF2DIST {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 24.GB,  task.attempt ) }
        time    = { time_scale ( 30.m,   task.attempt ) }
    }
    withName: PLOT_ORDINATION {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 2.GB,  task.attempt ) }
        time    = { time_scale ( 5.m,   task.attempt ) }
    }
    withName: PLOT_TREE {
        cpus    = { cpu_scale  ( 1,     task.attempt ) }
        memory  = { mem_scale  ( 2.GB,  task.attempt ) }
        time    = { time_scale ( 5.m,   task.attempt ) }
    }
    //Depreciated process resources
    //withName: GENOTYPE_POSTERIORS {
    //    cpus    = { cpu_scale  ( 2,     task.attempt ) }
    //    memory  = { mem_scale  ( 24.GB,  task.attempt ) }
    //    time    = { time_scale ( 6.h,   task.attempt ) }
    //}
    //    withName: FASTQC {
    //    cpus    = { cpu_scale  ( 2,     task.attempt ) }
    //    memory  = { mem_scale  ( 4.GB,  task.attempt ) }
    //    time    = { time_scale ( 30.m,   task.attempt ) }
    //}
    //withName: COMBINE_GVCFS {
    //    cpus    = { cpu_scale  ( 1,     task.attempt ) }
    //    memory  = { mem_scale  ( 8.GB,  task.attempt ) }
    //    time    = { time_scale ( 6.h,   task.attempt ) }
    //}
    //withName: MAP_TO_MITO {
    //    cpus    = { cpu_scale  ( 4,     task.attempt ) }
    //    memory  = { mem_scale  ( 8.GB,  task.attempt ) }
    //    time    = { time_scale ( 1.h,   task.attempt ) }
    //}        
}


plugins {
    id 'nf-schema@2.0.0'                            // create schema to validate sample sheets and pipeline parameters
}


report {
    enabled             = true
    overwrite           = true
    file                = "output/run_info/report.html"
}


trace {
    enabled             = true
    overwrite           = true
    file                = "output/run_info/trace.tsv"
}


dag {
    enabled             = true
    overwrite           = true
    file                = "output/run_info/dag.html"
    verbose             = true
}


timeline {
    enabled             = true
    overwrite           = true
    file                = "output/run_info/timeline.html"
}


// Function to ensure that resource requirements don't go beyond a maximum limit
// from: https://github.com/nf-core/tools/blob/99961bedab1518f592668727a4d692c4ddf3c336/nf_core/pipeline-template/nextflow.config#L206-L237
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// functions to increase resources in proportion to task attempts while staying within max limits
def cpu_scale ( obj, iteration ) {
    return check_max( obj * iteration , 'cpus' )
}

def mem_scale ( obj, iteration ) {
    return check_max( obj * iteration , 'memory' )
}


def time_scale ( obj, iteration ) {
    return check_max( obj * iteration , 'time' )
}